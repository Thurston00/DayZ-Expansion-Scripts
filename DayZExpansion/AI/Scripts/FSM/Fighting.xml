<?xml version="1.0" encoding="utf-8"?>
<fsm name="Fighting" type="eAI">
	<files />
	<variables>
		<variable name="LastFireTime" type="int" />
		<variable name="TimeBetweenFiring" type="int" default="5000" />
		<variable name="TimeBetweenFiringAndGettingUp" type="int" default="15000" />
		<variable name="LastEvadeTime" type="int" />
		<variable name="DistanceToTargetSq" type="float" />
	</variables>
	<states default="Positioning">
		<state name="Positioning">
			<variables>
				<variable name="position" type="vector" />
				<variable name="time" type="float" />
				<variable name="movementDirection" type="float" />
			</variables>
			<editor_data>
				<position x="891" y="714" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				time = 0;
				
				if (unit.eAI_ShouldGetUp())
					unit.Expansion_GetUp();
			</event_entry>
			<event_exit>
				unit.OverrideMovementDirection(false, 0);
			</event_exit>
			<event_update>
				if (unit.eAI_IsChangingStance())
					return CONTINUE;
				
				bool wantsLower = false;
				bool wantsRaise = false;
				
				int timeSinceLastFire = GetGame().GetTime() - fsm.LastFireTime;
				if (fsm.LastFireTime &gt; 0 &amp;&amp; timeSinceLastFire &gt; fsm.TimeBetweenFiring)
					wantsLower = true;
				
				auto target = unit.GetTarget();
				if (target)
				{
					position = target.GetPosition(unit, false);
					auto aimPosition = position + target.GetAimOffset(unit);
					fsm.DistanceToTargetSq = target.GetDistanceSq(unit, true);
					
					bool shouldBeMeleeing = false;
					
					auto hands = unit.GetHumanInventory().GetEntityInHands();
					auto targetEntity = target.GetEntity();
					auto itemTarget = ItemBase.Cast(targetEntity);
					if (!targetEntity || itemTarget)
					{
						wantsLower = true;
					}
					else if (!hands)
					{
						shouldBeMeleeing = true;
					}
					else if (hands.IsWeapon())
					{
						if (fsm.DistanceToTargetSq &lt;= 2.25)
							shouldBeMeleeing = true;
					}
					else if (hands.IsMeleeWeapon())
					{
						shouldBeMeleeing = true;
					}
					
					float minDist;
					
					if (shouldBeMeleeing)
					{
						if (fsm.DistanceToTargetSq &lt;= 3.24)
							wantsRaise = true;
						else
							wantsLower = true;
						
						auto player = PlayerBase.Cast(targetEntity);
						if (player &amp;&amp; player.IsUnconscious())
							minDist = 4.0;
						else
							minDist = 1.0;
					}
					else if (!wantsLower)
					{
						minDist = 4.0;
					}
					
					if (targetEntity &amp;&amp; !itemTarget &amp;&amp; (fsm.DistanceToTargetSq &lt;= minDist || unit.eAI_IsUnreachable(fsm.DistanceToTargetSq, minDist, position)))
					{
						time += DeltaTime;
						if (!movementDirection || time &gt; Math.RandomIntInclusive(1, 3))
						{
							if (Math.RandomIntInclusive(0, 1))
								movementDirection = Math.RandomFloat(135, 180);
							else
								movementDirection = Math.RandomFloat(-135, -180);
						}
						unit.OverrideMovementDirection(true, movementDirection);
						unit.OverrideMovementSpeed(true, Math.RandomIntInclusive(1, 2));
					}
					else
					{
						unit.OverrideMovementDirection(false, 0);
						unit.OverrideMovementSpeed(false, 0);
						time = 0;
						movementDirection = 0;
					}
					
					unit.LookAtPosition(aimPosition);
					unit.AimAtPosition(aimPosition);
					unit.OverrideTargetPosition(position);
					
					if (hands &amp;&amp; (hands.IsWeapon() || fsm.DistanceToTargetSq &lt;= 100.0))
					{
						if (hands.HasEnergyManager() &amp;&amp; !hands.GetCompEM().IsWorking() &amp;&amp; hands.GetCompEM().CanSwitchOn())
							hands.GetCompEM().SwitchOn();
					}
				}
				else
				{
					unit.OverrideMovementDirection(false, 0);
					unit.OverrideMovementSpeed(false, 0);
					unit.OverrideTargetPosition(unit.GetPosition());
				}
				
				if (wantsRaise &amp;&amp; unit.CanRaiseWeapon())
				{
					unit.RaiseWeapon(true);
				}
				else if (wantsLower || !unit.CanRaiseWeapon() || !unit.eAI_HasLOS(target))
				{
					unit.RaiseWeapon(false);
					unit.eAI_AdjustStance(fsm.LastFireTime, timeSinceLastFire, fsm.TimeBetweenFiringAndGettingUp);
				}
				
				return EXIT;
			</event_update>
		</state>
		<state name="Evade">
			<editor_data>
				<position x="518.636363636364" y="715.727272727273" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.eAI_ForceSideStep(Math.RandomFloat(0.3, 0.5));
				unit.OverrideMovementSpeed(true, 3);
			</event_entry>
			<event_exit>
				unit.OverrideMovementSpeed(false, 0);
			</event_exit>
			<event_update>
				if (unit.eAI_IsSideStepping())
					return CONTINUE;
				
				return EXIT;
			</event_update>
		</state>
		<state name="FireWeapon">
			<variables>
				<variable name="time" type="float" />
				<variable name="target" type="eAITarget" />
				<variable name="weapon" type="Weapon_Base" />
			</variables>
			<editor_data>
				<position x="618.636363636364" y="715.727272727273" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.RaiseWeapon(true);
				
				time = 0;
				
				fsm.LastFireTime = GetGame().GetTime();
				
				if (unit.eAI_AdjustStance(weapon, fsm.DistanceToTargetSq))
					EXTrace.Print(EXTrace.AI, unit, "eAI_AdjustStance " + typename.EnumToString(eAIStance, unit.eAI_GetStance()));
			</event_entry>
			<event_exit />
			<event_update>
				if (unit.eAI_IsChangingStance())
					return CONTINUE;
				
				if (!target)
					return EXIT;
				
				auto lowPosition = target.GetPosition(unit, false);
				auto aimPosition = lowPosition + target.GetAimOffset(unit);
				
				time += DeltaTime;
				unit.OverrideTargetPosition(lowPosition);
				unit.LookAtPosition(aimPosition);
				unit.AimAtPosition(aimPosition);
				
				if (!unit.IsRaised() || !unit.IsWeaponRaiseCompleted())
				{
					unit.RaiseWeapon(true);
				
					if (time &gt;= 0.5)
					{
						return EXIT;
					}
				
					// waiting for the weapon to be raised
					return CONTINUE;
				}
				
				auto neck = unit.GetBonePositionWS(unit.GetBoneIndexByName("neck"));
				auto direction = vector.Direction(neck, aimPosition).Normalized();
				if (vector.Dot(unit.GetAimDirection(), direction) &lt; 0.75)
				{
					if (time &gt;= 0.5)
					{
						return EXIT;
					}
				
					// waiting for unit to face target
					return CONTINUE;
				}
				
				unit.TryFireWeapon();
				
				return EXIT;
			</event_update>
		</state>
		<state name="Melee">
			<variables>
				<variable name="time" type="float" />
				<variable name="target" type="eAITarget" />
				<variable name="movementDirection" type="float" />
			</variables>
			<editor_data>
				<position x="1155" y="711" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				time = 0;
				
				fsm.LastFireTime = GetGame().GetTime();
				
				unit.Expansion_GetUp();
				
				//! FIXME: Pistols fuck up the hand animation state.
				//! Ugly workaround: Put away when entering melee.
				auto hands = unit.GetItemInHands();
				if (hands &amp;&amp; hands.IsKindOf("Pistol_Base"))
				{
					unit.eAI_TakeItemToInventory(hands);
				}
			</event_entry>
			<event_exit>
				unit.OverrideMovementDirection(false, 0);
			</event_exit>
			<event_update>
				if (unit.eAI_IsChangingStance())
					return CONTINUE;
				
				if (!target)
					return EXIT;
				
				auto aimOffset = target.GetAimOffset(unit);
				
				auto lowPosition = target.GetPosition(unit, false);
				auto aimPosition = lowPosition + aimOffset;
				
				time += DeltaTime;
				unit.OverrideTargetPosition(lowPosition);
				unit.LookAtPosition(aimPosition);
				unit.AimAtPosition(aimPosition);
				
				fsm.DistanceToTargetSq = target.GetDistanceSq(unit, true);
				if (fsm.DistanceToTargetSq &gt; 2.25)
				{
					if (time &gt;= 0.5)
					{
						time = 0;
						movementDirection = 0;
						unit.OverrideMovementDirection(false, 0);
						return EXIT;
					}
				
					return CONTINUE;
				}
				
				auto direction = vector.Direction(unit.GetPosition(), lowPosition).Normalized();
				if (vector.Dot(unit.GetDirection(), direction) &lt; 0.9 &amp;&amp; !target.info.IsInanimate())
				{
					if (time &gt;= Math.RandomIntInclusive(1, 3))
					{
						unit.OverrideMovementDirection(false, 0);
						unit.OverrideMovementSpeed(false, 0);
						time = 0;
						movementDirection = 0;
						return EXIT;
					}
				
					if (!movementDirection || time &gt; Math.RandomIntInclusive(1, 3))
					{
						if (Math.RandomIntInclusive(0, 1))
							movementDirection = Math.RandomFloat(135, 180);
						else
							movementDirection = Math.RandomFloat(-135, -180);
					}
					unit.OverrideMovementDirection(true, movementDirection);
					unit.OverrideMovementSpeed(true, Math.RandomIntInclusive(1, 2));
				
					return CONTINUE;
				}
				
				if (unit.IsFighting() &amp;&amp; time &lt; 0.3)
				{
					return CONTINUE;
				}
				
				unit.Notify_Melee();
				time = 0;
				movementDirection = 0;
				unit.OverrideMovementDirection(false, 0);
				
				return EXIT;
			</event_update>
		</state>
	</states>
	<transitions>
		<transition>
			<editor_data>
				<position_source x="1229" y="680" />
				<position_destination x="1228" y="711" />
			</editor_data>
			<guard>
				if (unit.IsRestrained()) return FAIL;
				
				if (!unit.CanRaiseWeapon() || !unit.eAI_HasLOS()) return FAIL;
				
				// we are targetting an entity?
				dst.target = unit.GetTarget();
				if (!dst.target || !dst.target.IsMeleeViable(unit) || dst.target.GetThreat(unit) &lt; 0.4) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Melee" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="1229" y="680" />
				<position_destination x="1228" y="711" />
			</editor_data>
			<guard>
				int missionTime = GetGame().GetTime();
				
				Weapon_Base aiWeapon;
				if (Class.CastTo(aiWeapon, unit.GetHumanInventory().GetEntityInHands()) &amp;&amp; missionTime - fsm.LastEvadeTime &lt; Math.RandomInt(2500, 5000)) return FAIL;
				
				auto target = unit.GetTarget();
				if (!target) return FAIL;
				
				auto targetPlayer = DayZPlayerImplement.Cast(target.GetEntity());
				if (!targetPlayer) return FAIL;
				
				if (!targetPlayer.IsRaised()) return FAIL;  //! Ignore if target player isn't raised
				
				if (!unit.eAI_HasLOS(target)) return FAIL;
				
				auto weapon = Weapon_Base.Cast(targetPlayer.GetHumanInventory().GetEntityInHands());
				if (!weapon) return FAIL;  //! Ignore if target player doesn't have a firearm
				
				vector fromTargetDirection = vector.Direction(targetPlayer.GetPosition(), unit.GetPosition()).Normalized();
				float fromTargetDot = vector.Dot(targetPlayer.Expansion_GetAimDirection(), fromTargetDirection);
				if (fromTargetDot &lt; 0.97) return FAIL;  //! Ignore if target player isn't aiming at us
				
				if (Math.RandomInt(0, 5) &gt; 0) return FAIL;  //! 1 in 5 chance to evade
				
				fsm.LastEvadeTime = missionTime;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Evade" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="696.636363636364" y="687.727272727273" />
				<position_destination x="696.636363636364" y="715.727272727273" />
			</editor_data>
			<guard>
				if (unit.IsRestrained()) return FAIL;
				
				// we are aiming at something?
				dst.target = unit.GetTarget();
				if (!dst.target) return FAIL;
				
				PlayerBase player;
				EntityAI targetEntity = dst.target.GetEntity();
				ItemBase itemTarget;
				if (!targetEntity)
				{
					return FAIL;
				}
				else if (Class.CastTo(player, targetEntity))
				{
					if (player.IsUnconscious())
						return FAIL;
				}
				else if (Class.CastTo(itemTarget, targetEntity))
				{
					// don't shoot at bandages or ammo/magazines, silly
					if (itemTarget.Expansion_CanBeUsedToBandage())
						return FAIL;
					if (itemTarget.IsMagazine())
						return FAIL;
					if (itemTarget.IsWeapon())
						return FAIL;
					if (itemTarget.Expansion_IsMeleeWeapon())
						return FAIL;
				}
				
				if (unit.IsFighting()) return FAIL;
				
				if (!Class.CastTo(dst.weapon, unit.GetItemInHands()) || dst.weapon.IsDamageDestroyed()) return FAIL;
				
				if (!unit.CanRaiseWeapon() || !unit.eAI_HasLOS(dst.target)) return FAIL;
				
				if (!dst.weapon.Expansion_IsChambered()) return FAIL;
				
				if (unit.GetWeaponManager().CanUnjam(dst.weapon)) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="FireWeapon" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="970" y="682" />
				<position_destination x="969" y="714" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Positioning" />
		</transition>
	</transitions>
</fsm>