<?xml version="1.0" encoding="utf-8"?>
<fsm name="Master" type="eAI">
	<files>
		<file name="Vehicles" />
		<file name="Fighting" />
		<file name="Reloading" />
	</files>
	<states default="Idle">
		<state name="Idle">
			<variables />
			<editor_data>
				<position x="544" y="329" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				if (!unit.GetTarget())
				{
					if (unit.GetLookDirectionRecalculate())
						unit.LookAtDirection("0 0 1");
				
					if (unit.GetAimDirectionRecalculate())
						unit.AimAtDirection("0 0 1");
				}
				
				auto hands = unit.GetItemInHands();
				if (hands &amp;&amp; hands.HasEnergyManager() &amp;&amp; hands.GetCompEM().IsWorking() &amp;&amp; hands.GetCompEM().CanSwitchOff())
				{
					hands.GetCompEM().SwitchOff();
				}
				
				unit.OverrideMovementDirection(false, 0);
				unit.OverrideMovementSpeed(true, 0);
			</event_entry>
			<event_exit />
			<event_update>
				return EXIT;
			</event_update>
		</state>
		<state name="Unconscious">
			<variables>
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="892.021210954633" y="252.363165761721" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				time = 0;
				unit.OverrideTargetPosition(unit.GetPosition());
				unit.OverrideMovementSpeed(true, 0);
			</event_entry>
			<event_exit />
			<event_update>
				if (time &gt; 3)
				{
					return EXIT;
				}
				
				if (!unit.IsUnconscious())
				{
					time += DeltaTime;  //! Allow time to stand up so we don't instantly start firing
				}
				
				return CONTINUE;
			</event_update>
		</state>
		<state name="Interacting">
			<variables />
			<editor_data>
				<position x="646.85281251958" y="173.442104279785" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.OverrideTargetPosition(unit.GetPosition() + unit.GetDirection() * unit.Expansion_GetMovementSpeed());
			</event_entry>
			<event_exit />
			<event_update>
				if (unit.eAI_HasInteractingPlayers())
				{
					return CONTINUE;
				}
				return EXIT;
			</event_update>
		</state>
		<state name="FollowFormation">
			<variables>
				<variable name="group" type="eAIGroup" />
				<variable name="speedLimit" type="int" />
			</variables>
			<editor_data>
				<position x="705.506428737142" y="490.855335435811" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.Expansion_GetUp();
				unit.OverrideMovementDirection(false, 0);
				unit.OverrideMovementSpeed(false, 0);
				speedLimit = unit.GetMovementSpeedLimit();
				if (speedLimit &gt; 0)
					unit.SetMovementSpeedLimit(3);  //! Make sure AI can reach formation positions when following leader by overriding speed limit 
			</event_entry>
			<event_exit>
				if (speedLimit &gt; 0)
					unit.SetMovementSpeedLimit(speedLimit);  //! Restore speed limit
			</event_exit>
			<event_update>
				if (!group) return EXIT;
				unit.OverrideTargetPosition(group.GetFormationPosition(unit));
				
				return EXIT;
			</event_update>
		</state>
		<state name="TraversingWaypoints">
			<variables>
				<variable name="path" type="ref TVectorArray" />
				<variable name="behaviour" type="eAIWaypointBehavior" />
				<variable name="backtracking" type="bool" />
				<variable name="index" type="int" />
				<variable name="threshold" type="float" default="1.0" />
				<variable name="previousDistance" type="float" />
				<variable name="previousWayPoint" type="vector" />
			</variables>
			<editor_data>
				<position x="492.26310970946" y="542.205251357419" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				path = unit.GetGroup().GetWaypoints();
				if (path.Count() == 0)
				{
					path = { unit.GetPosition() + unit.GetDirection() * unit.Expansion_GetMovementSpeed() };
				}
				behaviour = unit.GetGroup().GetWaypointBehaviour();
				unit.Expansion_GetUp();
				if (previousWayPoint == vector.Zero &amp;&amp; path.Count() &gt; 1)
					previousWayPoint = path[0] - vector.Direction(path[0], path[1]).Normalized();
			</event_entry>
			<event_exit />
			<event_update>
				if (behaviour == eAIWaypointBehavior.HALT)
					return EXIT;
				
				index = unit.GetGroup().m_CurrentWaypointIndex;
				backtracking = unit.GetGroup().m_BackTracking;
				float distance = vector.DistanceSq(unit.GetPosition(), path[index]);
				if (distance &lt; threshold)
				{
					previousWayPoint = path[index];
					if (backtracking) index--;
					else index++;
					threshold = 1.0;
				}
				else if (Math.AbsFloat(distance - previousDistance) &lt; 0.0016)
				{
					//! We seem to not be getting closer to the waypoint, possibly the path is blocked.
					//! Increase threshold until we are within distance.
					threshold += 0.01;
				}
				
				previousDistance = distance;
				
				if (index &lt; 0) 
				{
					if (behaviour == eAIWaypointBehavior.ALTERNATE)
					{
						backtracking = false;
						index = 1;
					}
					else
					{
						index = path.Count() - 1;
					}
				}
				else if (index == path.Count())
				{
					if (behaviour == eAIWaypointBehavior.ALTERNATE)
					{
						backtracking = true;
						index = path.Count() - 2;
					} 
					else if (behaviour == eAIWaypointBehavior.LOOP)
					{
						index = 0;
					}
				}
				
				index = Math.Clamp(index, 0, path.Count() - 1);
				
				bool isFinal;
				if (behaviour != eAIWaypointBehavior.LOOP)
					isFinal = index == 0 || index == path.Count() - 1;
				
				unit.OverrideTargetPosition(path[index], isFinal);
				unit.OverrideMovementDirection(false, 0);
				unit.OverrideMovementSpeed(false, 0);
				
				vector direction;
				if (path.Count() &gt; 1)
					direction = vector.Direction(previousWayPoint, path[index]).Normalized();
				else
					direction = unit.GetDirection();
				unit.Expansion_DebugObject_Deferred(index + 20, path[index] - "0 1.5 0", "ExpansionDebugNoticeMe_Red", direction);
				unit.Expansion_DebugObject_Deferred(path.Count() + 20, path[index], "ExpansionDebugNoticeMe", unit.GetDirection());
				
				unit.GetGroup().m_CurrentWaypointIndex = index;
				unit.GetGroup().m_BackTracking = backtracking;
				
				return EXIT;
			</event_update>
		</state>
		<state name="Vehicles" fsm="Vehicles">
			<editor_data>
				<position x="895.709194546504" y="371.938198458873" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry />
			<event_exit />
			<event_update>
				auto group = unit.GetGroup();
				if (!group) return EXIT;
				
				auto leader = group.GetLeader();
				//! @note leader can only briefly be null (disconnected/killed).
				//! We wait until a new leader has been determined (which may be the current unit).
				if (!leader) return CONTINUE;
				
				if (!sub_fsm.entity) return EXIT;
				
				if ((leader != unit &amp;&amp; leader.IsInTransport() &amp;&amp; leader.GetParent() == sub_fsm.entity) || unit.IsInTransport()) return CONTINUE;
				
				//! Wait until AI has left the vehicle and closed the door (if any)
				bool hasDoor;
				string source;
				ExpansionFSMHelper.DoorAnimationSource(sub_fsm.entity, sub_fsm.seat, hasDoor, source);
				if (hasDoor &amp;&amp; sub_fsm.entity.GetAnimationPhase(source) &gt; 0.5) return CONTINUE;
				
				return EXIT;
			</event_update>
		</state>
		<state name="Fighting" fsm="Fighting">
			<variables />
			<editor_data>
				<position x="345.886600687191" y="193.617136976937" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				if (unit.GetEmoteManager().IsEmotePlaying())
					unit.GetEmoteManager().ServerRequestEmoteCancel();
				
				unit.eAI_SetIsFightingFSM(true);
			</event_entry>
			<event_exit>
				unit.eAI_SetIsFightingFSM(false);
			</event_exit>
			<event_update>
				return EXIT;
			</event_update>
		</state>
		<state name="Weapon_Reloading" fsm="Reloading">
			<variables />
			<editor_data>
				<position x="241.837936881654" y="365.435451333598" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				if (unit.GetEmoteManager().IsEmotePlaying())
					unit.GetEmoteManager().ServerRequestEmoteCancel();
			</event_entry>
			<event_exit />
			<event_update />
		</state>
		<state name="Weapon_Unjamming">
			<variables>
				<variable name="weapon" type="Weapon_Base" />
				<variable name="time" type="float" />
				<variable name="failed_attempts" type="int" />
			</variables>
			<editor_data>
				<position x="241.678975886238" y="283.953840426607" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				time = 0;
				unit.RaiseWeapon(false);
				
				unit.StartActionObject(eAIActionWeaponUnjam, null);
			</event_entry>
			<event_exit>
				unit.OverrideMovementDirection(false, 0);
			</event_exit>
			<event_update>
				if (!unit.GetWeaponManager() || unit.IsUnconscious()) return EXIT;
				
				if (unit.GetWeaponManager().IsRunning())
				{
					time += DeltaTime;
					if (time &gt; 10)  //! Looks like something went terribly wrong
					{
						EXTrace.Print(true, unit, "Weapon_Unjamming - timeout");
						unit.eAI_Unbug("unjam");
						return EXIT;
					}
					
					auto target = unit.GetTarget();
					if (target &amp;&amp; target.GetDistanceSq(unit, true) &lt;= 2.25)
					{
						unit.OverrideMovementDirection(true, -180);
					}
				
					return CONTINUE;
				}
				
				if (unit.GetWeaponManager().CanUnjam(weapon))
				{
					failed_attempts++;
					EXTrace.Print(true, unit, "Weapon_Unjamming - failed (" + failed_attempts + ")");
					weapon.ValidateAndRepair();
				}
				else
				{
					failed_attempts = 0;
				}
				
				return EXIT;
			</event_update>
		</state>
		<state name="TakeItemToHands">
			<variables>
				<variable name="item" type="ItemBase" />
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="275.340877794781" y="547.920853681019" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				EXTrace.Print(EXTrace.AI, unit, "TakeItemToHands " + item.ToString());
				time = 0;
			</event_entry>
			<event_exit />
			<event_update>
				if (!item)
					return EXIT;
				
				if (unit.GetItemInHands() != item)
				{
					if (item.Expansion_IsInventoryLocked())
						ExpansionStatic.UnlockInventoryRecursive(item, 10134);
					
					if (!unit.eAI_TakeItemToHands(item))
						return EXIT;
				}
				
				if (time &lt; 0.5)
				{
					time += DeltaTime;
					return CONTINUE;
				}
				
				return EXIT;
			</event_update>
		</state>
		<state name="TakeItemToInventory">
			<variables>
				<variable name="item" type="ItemBase" />
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="375.340877794781" y="647.920853681019" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				EXTrace.Print(EXTrace.AI, unit, "TakeItemToInventory " + item.ToString());
				time = 0;
			</event_entry>
			<event_exit />
			<event_update>
				if (!item)
					return EXIT;
				
				if (!item.GetHierarchyRootPlayer())
				{
					if (item.Expansion_IsInventoryLocked())
						ExpansionStatic.UnlockInventoryRecursive(item, 10134);
					
					if (!unit.eAI_TakeItemToInventory(item))
						return EXIT;
				}
				
				if (time &lt; 0.5)
				{
					time += DeltaTime;
					return CONTINUE;
				}
				
				return EXIT;
			</event_update>
		</state>
		<state name="Bandaging_Self">
			<variables>
				<variable name="last_bandage_attempt_time" type="int" />
				<variable name="bandage" type="ItemBase" />
				<variable name="timeout" type="float" />
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="246.619877794781" y="467.752853681019" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				last_bandage_attempt_time = GetGame().GetTime();
				time = 0;
				float effectivity = bandage.GetBandagingEffectivity();
				if (effectivity &gt; 0)
					timeout = UATimeSpent.BANDAGE / effectivity + 8.0;
				else
					timeout = 16.0;
				if (unit.IsPlayerInStance(DayZPlayerConstants.STANCEMASK_PRONE | DayZPlayerConstants.STANCEMASK_RAISEDPRONE))
					unit.OverrideStance(DayZPlayerConstants.STANCEIDX_CROUCH);
			</event_entry>
			<event_exit>
				if (bandage)
				{
					if (bandage.IsDamageDestroyed() || !unit.eAI_TakeItemToInventory(bandage))
					{
						unit.eAI_DropItem(bandage);
					}
				}
			</event_exit>
			<event_update>
				if (unit.IsUnconscious()) return EXIT;
				
				if (unit.eAI_IsChangingStance())
					return CONTINUE;
				
				if (unit.GetActionManager().GetRunningAction())
				{
					time += DeltaTime;
					if (time &gt; timeout)  //! Looks like something went terribly wrong
					{
						EXTrace.Print(true, unit, "Bandaging_Self - timeout");
						unit.eAI_Unbug("bandage");
						time = 0;
						return EXIT;
					}
					
					return CONTINUE;
				}
				else
				{
					if (bandage)
					{
						if (unit.IsBleeding() &amp;&amp; !bandage.IsDamageDestroyed())
						{
							last_bandage_attempt_time = GetGame().GetTime();
							time = 0;
							
							unit.StartActionObject(ActionBandageSelf, null);
							
							return CONTINUE;
						}
					}
				}
				
				if (unit.Expansion_GetUp(true))
					return CONTINUE;
				
				return EXIT;
			</event_update>
		</state>
		<state name="PlayEmote">
			<variables />
			<editor_data>
				<position x="445.886600687191" y="293.617136976937" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.Expansion_PlayEmote();
			</event_entry>
			<event_exit />
			<event_update>
				return EXIT;
			</event_update>
		</state>
	</states>
	<transitions>
		<transition>
			<editor_data>
				<position_source x="938.972336543873" y="229.798443463138" />
				<position_destination x="939.021210954633" y="252.363165761721" />
			</editor_data>
			<guard>
				if (!(unit.IsUnconscious())) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Unconscious" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="892.021210954633" y="273.262936077279" />
				<position_destination x="694" y="341.086651264055" />
			</editor_data>
			<guard>
				if (unit.IsUnconscious()) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Unconscious" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="719.985399543115" y="150.091827885125" />
				<position_destination x="719.85281251958" y="173.442104279785" />
			</editor_data>
			<guard>
				if (!(unit.eAI_HasInteractingPlayers())) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Interacting" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="708.131447011985" y="213.442104279785" />
				<position_destination x="637.094556721445" y="329" />
			</editor_data>
			<guard>
				if (unit.eAI_HasInteractingPlayers()) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Interacting" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="323.444352352527" y="441.721949556564" />
				<position_destination x="323.444352352527" y="467.752853681019" />
			</editor_data>
			<guard>
				if (unit.IsFighting()) return FAIL;
				
				if (unit.IsRestrained()) return FAIL;
				
				if (!unit.IsBleeding()) return FAIL;
				
				if (GetGame().GetTime() - dst.last_bandage_attempt_time &lt; 4000) return FAIL;
				
				auto hands = unit.GetItemInHands();
				if (!hands) return FAIL;
				
				if (!hands.Expansion_CanBeUsedToBandage() || hands.IsDamageDestroyed()) return FAIL;
				
				if (!unit.GetCommand_MoveAI()) return FAIL;
				
				dst.bandage = hands;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Bandaging_Self" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="392.845475445666" y="467.752853681019" />
				<position_destination x="558.183798920839" y="369" />
			</editor_data>
			<guard>
				if (unit.GetActionManager().GetRunningAction()) return FAIL;
				
				if (GetGame().GetTime() - src.last_bandage_attempt_time &lt; 4000) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Bandaging_Self" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="305.386520870577" y="339.219542313248" />
				<position_destination x="304.837936881655" y="365.435451333598" />
			</editor_data>
			<guard>
				if (GetGame().GetTime() - dst.sub_fsm.last_attempt_time &lt; 1000) return FAIL;
				
				if (unit.IsClimbing() || unit.IsFalling() || unit.IsFighting() || !unit.GetCommand_MoveAI()) return FAIL;
				
				if (unit.IsRestrained()) return FAIL;
				
				if (!Class.CastTo(dst.sub_fsm.weapon, unit.GetItemInHands())) return FAIL;
				
				//! Allow sub-FSM to handle destroyed weapon so it gets dropped
				if (dst.sub_fsm.weapon.IsDamageDestroyed()) return SUCCESS;
				
				if (dst.sub_fsm.weapon.Expansion_IsChambered()) return FAIL;
				
				if (unit.GetWeaponManager().CanUnjam(dst.sub_fsm.weapon)) return FAIL;
				
				// don't move to the state if the action manager is operating
				if (!unit.GetActionManager() || unit.GetActionManager().GetRunningAction()) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Weapon_Reloading" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="344.344352352527" y="520.921949556564" />
				<position_destination x="345.340877794781" y="547.920853681019" />
			</editor_data>
			<guard>
				if (unit.IsFighting()) return FAIL;
				
				if (unit.IsRestrained()) return FAIL;
				
				//! Taking items to hands while raised breaks hands! Wait until lowered
				if (unit.IsRaised()) return FAIL;
				
				ItemBase hands = unit.GetItemInHands();
				
				//! If ruined, drop
				if (hands &amp;&amp; hands.IsDamageDestroyed())
				{
					unit.eAI_DropItem(hands, true, false);
					hands = null;
				}
				
				//! First check if we want to switch to bandage
				if (unit.IsBleeding() &amp;&amp; (unit.GetThreatToSelf() &lt; 0.4 || (unit.GetHealth01("", "Blood") &lt; 0.7 &amp;&amp; GetGame().GetTickTime() - unit.m_eAI_LastHitTime &gt; 10)))
				{
					if (!hands || !hands.Expansion_CanBeUsedToBandage())
					{
						//! Item in hand is either not bandage/rag or is ruined
						dst.item = unit.GetBandageToUse();
						if (dst.item)
						{
							//! Try to put in inventory (shoulder slot or cargo), drop if not possible
							if (hands &amp;&amp; !unit.eAI_TakeItemToInventory(hands))
								unit.eAI_DropItem(hands, true, false);
							
							return SUCCESS;
						}
					}
				}
				
				if (hands)
					return FAIL;
				
				dst.item = unit.GetWeaponToUse(true);
				if (dst.item)
					return SUCCESS;
				
				eAITarget target = unit.GetTarget();
				ItemBase targetItem;
				if (target &amp;&amp; Class.CastTo(targetItem, target.GetEntity()) &amp;&amp; (targetItem.IsWeapon() || targetItem.Expansion_IsMeleeWeapon()) &amp;&amp; !targetItem.GetHierarchyRootPlayer() &amp;&amp; !targetItem.IsSetForDeletion())
				{
					if (target.GetDistanceSq(unit, true) &lt; 2.25 &amp;&amp; target.GetThreat(unit) &gt; 0.1)
					{
						dst.item = targetItem;
						return SUCCESS;
					}
				}
				
				dst.item = unit.GetMeleeWeaponToUse();
				if (dst.item)
					return SUCCESS;
				
				 return FAIL;
			</guard>
			<event />
			<from_state />
			<to_state name="TakeItemToHands" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="425.340877794781" y="566.587863735993" />
				<position_destination x="587.553377501537" y="369" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="TakeItemToHands" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="444.344352352527" y="620.921949556564" />
				<position_destination x="445.340877794781" y="647.920853681019" />
			</editor_data>
			<guard>
				if (unit.IsFighting()) return FAIL;
				
				if (unit.IsRestrained()) return FAIL;
				
				if (unit.IsRaised()) return FAIL;
				
				eAITarget target = unit.GetTarget();
				ItemBase targetItem;
				
				if (!target || !Class.CastTo(targetItem, target.GetEntity()) || targetItem.GetHierarchyRootPlayer() || targetItem.IsSetForDeletion())
					return FAIL;
				
				if (target.GetDistanceSq(unit, true) &gt;= 2.25)
					return FAIL;
				
				ItemBase hands;
				InventoryLocation dstLoc;
				if (targetItem.IsWeapon() || targetItem.IsMagazine())
				{
					//! PREPARE SWAP FROM CURRENT HAND ITEM TO GUN IN INV OR ON GROUND
					//! If target is gun or magazine (latter means gun w/o ammo is in inventory) and we have melee in hand, prepare swap
					hands = unit.GetItemInHands();
					if (hands &amp;&amp; hands.Expansion_IsMeleeWeapon())
					{
						//! Only drop if destroyed, target is gun, or target is mag that fits in inventory, else might take current hand item again...
						if (hands.IsDamageDestroyed() || targetItem.IsWeapon() || (targetItem.IsMagazine() &amp;&amp; !unit.eAI_GetItemThreatOverride(targetItem) &amp;&amp; unit.eAI_FindFreeInventoryLocationFor(targetItem, 0, dstLoc)))
						{
							if (hands.IsDamageDestroyed())
							{
								unit.eAI_DropItem(hands, true, false);
							}
							else if (!unit.eAI_TakeItemToInventory(hands))
							{
								unit.eAI_ItemThreatOverride(hands, true);
								unit.eAI_DropItem(hands, true, false);
							}
						}
					}
					
					if (targetItem.IsWeapon())  //! Picking up guns is handled by TakeItemToHands state
						return FAIL;
				}
				else if (targetItem.Expansion_IsMeleeWeapon())
				{
					//! Picking up melee weapons is handled by TakeItemToHands state
					return FAIL;
				}
				
				if (target.GetThreat(unit) &lt;= 0.1)
					return FAIL;
				
				if ((dstLoc &amp;&amp; !dstLoc.IsValid()) || (!dstLoc &amp;&amp; !unit.eAI_FindFreeInventoryLocationFor(targetItem)))
				{
					unit.eAI_ItemThreatOverride(targetItem, true);
					return FAIL;
				}
				
				unit.eAI_ItemThreatOverride(targetItem, false);
				
				dst.item = targetItem;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="TakeItemToInventory" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="425.340877794781" y="566.587863735993" />
				<position_destination x="587.553377501537" y="369" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="TakeItemToInventory" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="309.931260171115" y="257.964244245612" />
				<position_destination x="310.678975886238" y="283.953840426607" />
			</editor_data>
			<guard>
				if (unit.IsClimbing() || unit.IsFalling() || unit.IsFighting() || !unit.GetCommand_MoveAI()) return FAIL;
				
				if (unit.IsRestrained()) return FAIL;
				
				if (!Class.CastTo(dst.weapon, unit.GetItemInHands())) return FAIL;
				
				if (!unit.GetWeaponManager().CanUnjam(dst.weapon)) return FAIL;
				
				// don't move to the state if the action manager is operating
				if (!unit.GetActionManager() || unit.GetActionManager().GetRunningAction()) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Weapon_Unjamming" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="391.837936881654" y="380.990613137228" />
				<position_destination x="544" y="360.278764885883" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Weapon_Reloading" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="391.678975886238" y="304.815580440075" />
				<position_destination x="544" y="346.731390564592" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Weapon_Unjamming" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="411.536567580795" y="166.157628667599" />
				<position_destination x="411.886600687193" y="193.617136976937" />
			</editor_data>
			<guard>
				if (unit.IsRestrained()) return FAIL;
				
				if (unit.GetThreatToSelf() &lt; 0.4) return FAIL;
				if (unit.GetActionManager().GetRunningAction()) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Fighting" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="477.015543467033" y="233.617136976937" />
				<position_destination x="556.939258653809" y="329" />
			</editor_data>
			<guard>
				if (unit.GetThreatToSelf() &gt; 0.2) return FAIL;
				
				if (unit.IsFighting()) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Fighting" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="895.709194546504" y="389.964300297873" />
				<position_destination x="694" y="356.89192130556" />
			</editor_data>
			<guard>
				if (unit.IsInTransport()) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Vehicles" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="963.83813732635" y="345.935333753678" />
				<position_destination x="963.7091945465" y="371.938198458873" />
			</editor_data>
			<guard>
				auto group = unit.GetGroup();
				if (!group) return FAIL;
				
				if (group.GetFormationState() != eAIGroupFormationState.IN) return FAIL;
				
				auto leader = group.GetLeader();
				if (!leader || leader == unit) return FAIL;
				
				if (!leader.IsInTransport()) return FAIL;
				
				CarScript car;
				if (!Class.CastTo(car, leader.GetParent())) return FAIL;
				
				//TODO: make this event based instead and store as a variable within CarScript.
				//Prevents looping through the crew and insteads just compares a bool.
				for (int i = 1; i &lt; car.CrewSize(); i++)
				{
					if (car.CrewMember(i) == null &amp;&amp; !car.Expansion_IsSeatReservedByOther(i, unit) &amp;&amp; car.IsAreaAtDoorFree(i))
					{
						dst.sub_fsm.seat = i;
						dst.sub_fsm.entity = car;
						car.Expansion_ReserveSeat(i, unit);
						
				  		return SUCCESS;
					}
				}
				
				return FAIL;
			</guard>
			<event />
			<from_state />
			<to_state name="Vehicles" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="995.709194546504" y="489.964300297873" />
				<position_destination x="794" y="456.89192130556" />
			</editor_data>
			<guard>
				if (unit.IsRestrained()) return FAIL;
				if (!unit.GetCommand_MoveAI()) return FAIL;
				if (unit.eAI_IsChangingStance()) return FAIL;
				
				if (!unit.m_Expansion_EmoteID) return FAIL;
				if (unit.GetEmoteManager().IsEmotePlaying() || unit.GetEmoteManager().Expansion_GetCurrentGesture() == unit.m_Expansion_EmoteID) return FAIL;
				if (unit.GetThreatToSelf(true) &gt; 0.2) return FAIL;
				if (unit.IsFighting()) return FAIL;
				if (unit.GetWeaponManager().IsRunning()) return FAIL;
				if (unit.GetActionManager().GetRunningAction()) return FAIL;
				
				auto hands = unit.GetItemInHands();
				if (hands &amp;&amp; hands.Expansion_CanBeUsedToBandage())
					return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="PlayEmote" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="1095.709194546504" y="589.964300297873" />
				<position_destination x="894" y="556.89192130556" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="PlayEmote" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="638.223504581552" y="369" />
				<position_destination x="723.010348161875" y="490.855335435811" />
			</editor_data>
			<guard>
				if (unit.GetThreatToSelf() &gt;= 0.4) return FAIL;
				
				dst.group = unit.GetGroup();
				if (!dst.group) return FAIL;
				
				if (dst.group.GetFormationState() != eAIGroupFormationState.IN) return FAIL;
				
				auto leader = dst.group.GetLeader();
				if (!leader || leader == unit) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Idle,FollowFormation" />
			<to_state name="FollowFormation" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="604.355068778326" y="369" />
				<position_destination x="624.401116247196" y="542.205251357419" />
			</editor_data>
			<guard>
				if (unit.GetThreatToSelf() &gt;= 0.4) return FAIL;
				
				auto group = unit.GetGroup();
				if (!group) return FAIL;
				
				// we are the leader so we traverse the waypoints
				auto leader = group.GetLeader();
				if (leader &amp;&amp; leader != unit) return FAIL;
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Idle,TraversingWaypoints" />
			<to_state name="TraversingWaypoints" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="611.41821585596" y="542.205251357419" />
				<position_destination x="591.936642317143" y="369" />
			</editor_data>
			<guard>
				auto group = unit.GetGroup();
				if (unit.GetThreatToSelf() &gt;= 0.4 || !group || group.GetLeader() != unit) return SUCCESS;
				
				return FAIL;
			</guard>
			<event />
			<from_state name="TraversingWaypoints" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="738.815618203381" y="490.855335435811" />
				<position_destination x="652.899826762951" y="369" />
			</editor_data>
			<guard>
				auto group = unit.GetGroup();
				if (!group || group.GetLeader() == unit || group.GetFormationState() != eAIGroupFormationState.IN) return SUCCESS;
				
				if (unit.GetThreatToSelf() &gt;= 0.4) return SUCCESS;
				
				return FAIL;
			</guard>
			<event />
			<from_state name="FollowFormation" />
			<to_state name="Idle" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="738.815618203381" y="590.855335435811" />
				<position_destination x="652.899826762951" y="469" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Idle" />
		</transition>
	</transitions>
</fsm>