<?xml version="1.0" encoding="utf-8"?>
<fsm name="Reloading" type="eAI">
	<files />
	<variables>
		<variable name="weapon" type="Weapon_Base" />
		<variable name="last_attempt_time" type="int" />
		<variable name="failed_attempts" type="int" />
	</variables>
	<states default="Start">
		<state name="Start">
			<variables />
			<editor_data>
				<position x="561" y="364" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				fsm.last_attempt_time = GetGame().GetTime();
				
				unit.OverrideMovementSpeed(false, 0);
			</event_entry>
			<event_exit />
			<event_update>
				return EXIT;
			</event_update>
		</state>
		<state name="Reloading">
			<variables>
				<variable name="magazine" type="Magazine" />
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="457.565289256198" y="477.213223140496" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				time = 0;
				unit.RaiseWeapon(false);
				unit.ReloadWeaponAI(fsm.weapon, magazine);
			</event_entry>
			<event_exit>
				unit.eAI_CancelSidestep();
			</event_exit>
			<event_update>
				if (!unit.GetWeaponManager() || unit.IsUnconscious()) return EXIT;
				
				if (unit.GetWeaponManager().IsRunning())
				{
					time += DeltaTime;
					if (time &gt; 12)  //! Looks like something went terribly wrong
					{
						EXTrace.Print(true, unit, "Weapon_Reloading - Reloading - timeout");
						unit.eAI_Unbug("reload");
						return EXIT;
					}
					
					vector position;
					
					auto target = unit.GetTarget();
					if (target &amp;&amp; unit.GetThreatToSelf() &gt;= 0.4)
					{
						if (!unit.eAI_IsSideStepping() &amp;&amp; unit.eAI_HasLOS(target))
						{
							float distSq = target.GetDistanceSq(unit, true);
							if (distSq &lt;= 2.25)
							{
								float movementDirection;
								if (Math.RandomIntInclusive(0, 1))
									movementDirection = Math.RandomFloat(135, 180);
								else
									movementDirection = Math.RandomFloat(-135, -180);
								unit.eAI_ForceSideStep(Math.RandomFloat(1, 1.5), null, movementDirection);
							}
							else if (distSq &lt; 100.0)
							{
								unit.eAI_ForceSideStep(Math.RandomFloat(1, 1.5), null, 0.0, false);
							}
						}
						
						position = target.GetPosition(unit, false);
					}
					else
					{
						auto group = unit.GetGroup();
						if (group)
						{
							if (group.GetLeader() != unit)
								position = group.GetFormationPosition(unit);
							else
								position = group.GetCurrentWaypoint();
						}
					}
					
					if (position != vector.Zero)
						unit.OverrideTargetPosition(position);
				
					return CONTINUE;
				}
				
				if (!fsm.weapon) return EXIT;
				
				if (fsm.weapon.IsDamageDestroyed())
				{
					unit.eAI_DropItem(fsm.weapon);
				}
				else if (fsm.weapon.IsChamberEmpty(fsm.weapon.GetCurrentMuzzle()))
				{
					fsm.failed_attempts++;
					EXTrace.Print(true, unit, "Weapon_Reloading - Reloading - failed (" + fsm.failed_attempts + ")");
					fsm.weapon.ValidateAndRepair();
				}
				else
				{
					fsm.failed_attempts = 0;
				}
				
				return EXIT;
			</event_update>
		</state>
		<state name="Reloading_Fail">
			<variables>
				<variable name="time" type="float" />
			</variables>
			<editor_data>
				<position x="649.545454545455" y="473.876033057851" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry>
				unit.RaiseWeapon(false);
				
				time = 0;
			</event_entry>
			<event_exit />
			<event_update>
				time += DeltaTime;
				
				// waiting for the weapon to be lowered
				if (fsm.weapon &amp;&amp; time &lt; 0.5)
					return CONTINUE;
				
				return EXIT;
			</event_update>
		</state>
		<state name="Removing">
			<variables />
			<editor_data>
				<position x="648.925619834711" y="557.735537190083" />
				<size width="150" height="40" />
			</editor_data>
			<event_entry />
			<event_exit />
			<event_update>
				if (!fsm.weapon || unit.GetItemInHands() != fsm.weapon)
					return EXIT;  // remove complete
				
				if (!unit.eAI_TakeItemToInventory(fsm.weapon))
					unit.eAI_DropItem(fsm.weapon);
				
				return CONTINUE;
			</event_update>
		</state>
	</states>
	<transitions>
		<transition>
			<editor_data>
				<position_source x="620.762721125606" y="404" />
				<position_destination x="532.334805190902" y="477.213223140496" />
			</editor_data>
			<guard>
				if (!fsm.weapon || fsm.weapon.IsDamageDestroyed())
					return FAIL;
				
				if (!unit.eAI_HasAmmoForFirearm(fsm.weapon, dst.magazine)) return FAIL;
				
				if (!dst.magazine)
					EXTrace.Start0(EXTrace.AI, this, "Reloading " + fsm.weapon + " from internal mag");
				else
					EXTrace.Start0(EXTrace.AI, this, "Reloading " + fsm.weapon + " from mag " + dst.magazine);
				
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Start" />
			<to_state name="Reloading" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="653.547366983129" y="404" />
				<position_destination x="714.545454545455" y="473.876033057851" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Start" />
			<to_state name="Reloading_Fail" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="723.285218414043" y="513.876033057851" />
				<position_destination x="724.111664695034" y="557.735537190083" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Reloading_Fail" />
			<to_state name="Removing" />
		</transition>
		<transition>
			<editor_data>
				<position_source x="529.029020066935" y="517.213223140496" />
				<position_destination x="528.202573785944" y="555.12383705348" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Reloading" />
			<to_state />
		</transition>
		<transition>
			<editor_data>
				<position_source x="720.925619834711" y="597.735537190083" />
				<position_destination x="721.09671470528" y="630.613824192337" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state name="Removing" />
			<to_state />
		</transition>
		<transition>
			<editor_data>
				<position_source x="720.925619834711" y="697.735537190083" />
				<position_destination x="721.09671470528" y="730.613824192337" />
			</editor_data>
			<guard>
				return SUCCESS;
			</guard>
			<event />
			<from_state />
			<to_state name="Start" />
		</transition>
	</transitions>
</fsm>